# Basic GCP VPC Module
# Generated by X-Terraform Agent v0.0.1
# Based on HashiCorp Terraform best practices (https://developer.hashicorp.com/terraform)

terraform {
  required_version = ">= 1.0"
  required_providers {
    google = {
      source  = "hashicorp/google"
      version = "~> 5.0"
    }
  }
}

# VPC Network
resource "google_compute_network" "vpc" {
  name                    = var.network_name
  auto_create_subnetworks = false
  routing_mode            = "REGIONAL"

  tags = merge(var.common_tags, {
    Name = var.network_name
  })
}

# Public Subnet
resource "google_compute_subnetwork" "public" {
  count         = length(var.public_subnet_ranges)
  name          = "${var.network_name}-public-${count.index + 1}"
  ip_cidr_range = var.public_subnet_ranges[count.index]
  region        = var.regions[count.index]
  network       = google_compute_network.vpc.id

  log_config {
    aggregation_interval = "INTERVAL_5_SEC"
    flow_sampling        = 0.5
    metadata            = "INCLUDE_ALL_METADATA"
  }

  tags = merge(var.common_tags, {
    Name = "${var.network_name}-public-${count.index + 1}"
    Type = "Public"
  })
}

# Private Subnet
resource "google_compute_subnetwork" "private" {
  count         = length(var.private_subnet_ranges)
  name          = "${var.network_name}-private-${count.index + 1}"
  ip_cidr_range = var.private_subnet_ranges[count.index]
  region        = var.regions[count.index]
  network       = google_compute_network.vpc.id

  log_config {
    aggregation_interval = "INTERVAL_5_SEC"
    flow_sampling        = 0.5
    metadata            = "INCLUDE_ALL_METADATA"
  }

  tags = merge(var.common_tags, {
    Name = "${var.network_name}-private-${count.index + 1}"
    Type = "Private"
  })
}

# Cloud Router for NAT
resource "google_compute_router" "router" {
  count   = var.enable_nat ? 1 : 0
  name    = "${var.network_name}-router"
  region  = var.regions[0]
  network = google_compute_network.vpc.id

  tags = merge(var.common_tags, {
    Name = "${var.network_name}-router"
  })
}

# Cloud NAT for private subnets
resource "google_compute_router_nat" "nat" {
  count                              = var.enable_nat ? 1 : 0
  name                               = "${var.network_name}-nat"
  router                             = google_compute_router.router[0].name
  region                             = google_compute_router.router[0].region
  nat_ip_allocate_option             = "AUTO_ONLY"
  source_subnetwork_ip_ranges_to_nat = "ALL_SUBNETWORKS_ALL_IP_RANGES"

  log_config {
    enable = true
    filter = "ERRORS_ONLY"
  }
}

# Firewall rule for SSH access
resource "google_compute_firewall" "ssh" {
  count   = var.enable_ssh_access ? 1 : 0
  name    = "${var.network_name}-allow-ssh"
  network = google_compute_network.vpc.name

  allow {
    protocol = "tcp"
    ports    = ["22"]
  }

  source_ranges = var.ssh_source_ranges
  target_tags   = ["ssh"]

  tags = merge(var.common_tags, {
    Name = "${var.network_name}-ssh-firewall"
  })
}

# Firewall rule for HTTP access
resource "google_compute_firewall" "http" {
  count   = var.enable_http_access ? 1 : 0
  name    = "${var.network_name}-allow-http"
  network = google_compute_network.vpc.name

  allow {
    protocol = "tcp"
    ports    = ["80"]
  }

  source_ranges = ["0.0.0.0/0"]
  target_tags   = ["http-server"]

  tags = merge(var.common_tags, {
    Name = "${var.network_name}-http-firewall"
  })
}

# Firewall rule for HTTPS access
resource "google_compute_firewall" "https" {
  count   = var.enable_https_access ? 1 : 0
  name    = "${var.network_name}-allow-https"
  network = google_compute_network.vpc.name

  allow {
    protocol = "tcp"
    ports    = ["443"]
  }

  source_ranges = ["0.0.0.0/0"]
  target_tags   = ["https-server"]

  tags = merge(var.common_tags, {
    Name = "${var.network_name}-https-firewall"
  })
}

# Firewall rule for internal communication
resource "google_compute_firewall" "internal" {
  name    = "${var.network_name}-allow-internal"
  network = google_compute_network.vpc.name

  allow {
    protocol = "tcp"
    ports    = ["0-65535"]
  }

  allow {
    protocol = "udp"
    ports    = ["0-65535"]
  }

  allow {
    protocol = "icmp"
  }

  source_ranges = [
    var.vpc_cidr_block
  ]

  tags = merge(var.common_tags, {
    Name = "${var.network_name}-internal-firewall"
  })
} 