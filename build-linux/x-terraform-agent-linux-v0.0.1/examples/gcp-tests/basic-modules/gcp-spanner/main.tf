# Basic Cloud Spanner Module
# Generated by X-Terraform Agent v0.0.1
# Based on HashiCorp Terraform best practices (https://developer.hashicorp.com/terraform)

terraform {
  required_version = ">= 1.0"
  required_providers {
    google = {
      source  = "hashicorp/google"
      version = "~> 5.0"
    }
  }
}

# Cloud Spanner Instance
resource "google_spanner_instance" "main" {
  name         = var.instance_name
  config       = var.instance_config
  display_name = var.display_name
  num_nodes    = var.num_nodes

  # Labels
  labels = merge(var.common_labels, {
    environment = var.environment
    managed-by  = "terraform"
  })

  # Timeouts
  timeouts {
    create = "30m"
    update = "30m"
    delete = "30m"
  }
}

# Cloud Spanner Database
resource "google_spanner_database" "database" {
  instance = google_spanner_instance.main.name
  name     = var.database_name
  version  = var.database_version

  # DDL statements
  dynamic "ddl" {
    for_each = var.ddl_statements
    content {
      statement = ddl.value
    }
  }

  # Encryption config
  encryption_config {
    kms_key_name = var.kms_key_name
  }

  # Labels
  labels = merge(var.common_labels, {
    environment = var.environment
    database    = var.database_name
  })

  # Timeouts
  timeouts {
    create = "30m"
    update = "30m"
    delete = "30m"
  }
}

# IAM binding for Spanner admin
resource "google_spanner_instance_iam_binding" "admin" {
  instance = google_spanner_instance.main.name
  role     = "roles/spanner.admin"

  members = var.admin_members
}

# IAM binding for Spanner user
resource "google_spanner_instance_iam_binding" "user" {
  instance = google_spanner_instance.main.name
  role     = "roles/spanner.user"

  members = var.user_members
}

# IAM binding for Spanner viewer
resource "google_spanner_instance_iam_binding" "viewer" {
  instance = google_spanner_instance.main.name
  role     = "roles/spanner.viewer"

  members = var.viewer_members
}

# Backup configuration
resource "google_spanner_database_backup" "backup" {
  count    = var.enable_backup ? 1 : 0
  instance = google_spanner_instance.main.name
  database = google_spanner_database.database.name
  backup_id = "${var.database_name}-backup-${formatdate("YYYY-MM-DD", timestamp())}"

  # Expiration time
  expiration_time = timeadd(timestamp(), "${var.backup_retention_days}d")

  # Labels
  labels = merge(var.common_labels, {
    environment = var.environment
    backup      = "true"
  })
}

# Monitoring and alerting
resource "google_monitoring_alert_policy" "spanner_high_cpu" {
  count        = var.enable_monitoring ? 1 : 0
  display_name = "Spanner High CPU Usage"
  combiner     = "OR"

  conditions {
    display_name = "High CPU Usage"
    condition_threshold {
      filter     = "metric.type=\"spanner.googleapis.com/instance/cpu/utilization\" AND resource.labels.instance_id=\"${google_spanner_instance.main.name}\""
      duration   = "300s"
      comparison = "COMPARISON_GREATER_THAN"
      threshold_value = 0.8
    }
  }

  notification_channels = var.notification_channels
}

resource "google_monitoring_alert_policy" "spanner_high_storage" {
  count        = var.enable_monitoring ? 1 : 0
  display_name = "Spanner High Storage Usage"
  combiner     = "OR"

  conditions {
    display_name = "High Storage Usage"
    condition_threshold {
      filter     = "metric.type=\"spanner.googleapis.com/instance/storage/utilization\" AND resource.labels.instance_id=\"${google_spanner_instance.main.name}\""
      duration   = "300s"
      comparison = "COMPARISON_GREATER_THAN"
      threshold_value = 0.85
    }
  }

  notification_channels = var.notification_channels
} 