# Outputs for Advanced VPC Module
# Generated by X-Terraform Agent v0.0.1

output "vpc_id" {
  description = "The ID of the VPC"
  value       = aws_vpc.main.id
}

output "vpc_cidr_block" {
  description = "The CIDR block of the VPC"
  value       = aws_vpc.main.cidr_block
}

output "vpc_arn" {
  description = "The ARN of the VPC"
  value       = aws_vpc.main.arn
}

output "public_subnet_ids" {
  description = "List of IDs of public subnets"
  value       = aws_subnet.public[*].id
}

output "public_subnet_cidr_blocks" {
  description = "List of CIDR blocks of public subnets"
  value       = aws_subnet.public[*].cidr_block
}

output "public_subnet_arns" {
  description = "List of ARNs of public subnets"
  value       = aws_subnet.public[*].arn
}

output "private_subnet_ids" {
  description = "List of IDs of private subnets"
  value       = aws_subnet.private[*].id
}

output "private_subnet_cidr_blocks" {
  description = "List of CIDR blocks of private subnets"
  value       = aws_subnet.private[*].cidr_block
}

output "private_subnet_arns" {
  description = "List of ARNs of private subnets"
  value       = aws_subnet.private[*].arn
}

output "internet_gateway_id" {
  description = "The ID of the Internet Gateway"
  value       = aws_internet_gateway.main.id
}

output "internet_gateway_arn" {
  description = "The ARN of the Internet Gateway"
  value       = aws_internet_gateway.main.arn
}

output "nat_gateway_id" {
  description = "The ID of the NAT Gateway"
  value       = var.enable_nat_gateway ? aws_nat_gateway.main[0].id : null
}

output "nat_gateway_public_ip" {
  description = "The public IP address of the NAT Gateway"
  value       = var.enable_nat_gateway ? aws_eip.nat[0].public_ip : null
}

output "public_route_table_id" {
  description = "The ID of the public route table"
  value       = aws_route_table.public.id
}

output "private_route_table_id" {
  description = "The ID of the private route table"
  value       = var.enable_nat_gateway ? aws_route_table.private[0].id : null
}

output "default_security_group_id" {
  description = "The ID of the default security group"
  value       = aws_security_group.default.id
}

output "web_security_group_id" {
  description = "The ID of the web security group"
  value       = var.enable_web_security_group ? aws_security_group.web[0].id : null
}

output "database_security_group_id" {
  description = "The ID of the database security group"
  value       = var.enable_database_security_group ? aws_security_group.database[0].id : null
}

output "flow_log_id" {
  description = "The ID of the VPC Flow Log"
  value       = var.enable_flow_logs ? aws_flow_log.main[0].id : null
}

output "flow_log_arn" {
  description = "The ARN of the VPC Flow Log"
  value       = var.enable_flow_logs ? aws_flow_log.main[0].arn : null
}

output "cloudwatch_log_group_name" {
  description = "The name of the CloudWatch Log Group for Flow Logs"
  value       = var.enable_flow_logs ? aws_cloudwatch_log_group.flow_log[0].name : null
}

output "flow_log_iam_role_arn" {
  description = "The ARN of the IAM role for Flow Logs"
  value       = var.enable_flow_logs ? aws_iam_role.flow_log[0].arn : null
}

output "availability_zones" {
  description = "List of availability zones used"
  value       = var.availability_zones
}

output "subnet_count" {
  description = "Number of subnets created"
  value = {
    public  = length(var.public_subnet_cidrs)
    private = length(var.private_subnet_cidrs)
    total   = length(var.public_subnet_cidrs) + length(var.private_subnet_cidrs)
  }
}

output "security_group_count" {
  description = "Number of security groups created"
  value = {
    default  = 1
    web      = var.enable_web_security_group ? 1 : 0
    database = var.enable_database_security_group ? 1 : 0
    total    = 1 + (var.enable_web_security_group ? 1 : 0) + (var.enable_database_security_group ? 1 : 0)
  }
}

output "module_summary" {
  description = "Summary of the VPC module configuration"
  value = {
    environment                    = var.environment
    vpc_cidr_block                = var.vpc_cidr_block
    public_subnets                = length(var.public_subnet_cidrs)
    private_subnets               = length(var.private_subnet_cidrs)
    availability_zones            = length(var.availability_zones)
    nat_gateway_enabled           = var.enable_nat_gateway
    flow_logs_enabled             = var.enable_flow_logs
    web_security_group_enabled    = var.enable_web_security_group
    database_security_group_enabled = var.enable_database_security_group
  }
} 